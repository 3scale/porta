require 'simplecov'
SimpleCov.start

if ENV['CI']
  require 'codecov'
  SimpleCov.formatter = SimpleCov::Formatter::Codecov
end

# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

## Cucumber 2.0 compatibility layer to support latest parallel_test, can be dropped on Cucumber 3.0+
# https://github.com/grosser/parallel_tests/pull/604#issuecomment-343969394
Cucumber::Configuration.default.constantize('ParallelTests::Cucumber::FailuresLogger').class_eval do
  def initialize(a,b,c)
    super
    @io = prepare_io(b)
  end
end

require 'cucumber/formatter/unicode' # Remove this line if you don't want Cucumber Unicode support

non_transactional = %w{
  @backend
  @emails
  @stats
  @search
  @audit
  @commit-transactions
}.freeze

transactional = non_transactional.map{|t| "~#{t}" }

Before transactional.join(' or ') do
  Cucumber::Rails::Database.before_js if Cucumber::Rails::Database.autorun_database_cleaner
end

Before non_transactional.join(' or ') do
  Cucumber::Rails::Database.before_non_js if Cucumber::Rails::Database.autorun_database_cleaner
end

require 'cucumber/rails'
require 'cucumber/rails/rspec'

require 'factory_girl/step_definitions'

# require 'cucumber/rails/capybara_javascript_emulation' # Lets you click links with onclick javascript handlers without using @culerity or @javascript
#
# Capybara defaults to XPath selectors rather than Webrat's default of CSS3. In
# order to ease the transition to Capybara we set the default here. If you'd
# prefer to use XPath just remove this line and adjust any selectors in your
# steps to use the XPath syntax.
Capybara.default_selector = :css

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how
# your application behaves in the production environment, where an error page will
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false

# Possible values are :truncation and :transaction
# The :transaction strategy is faster, but might give you threading problems.
# See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature
Cucumber::Rails::Database.javascript_strategy = :truncation

DatabaseCleaner.clean_with(:truncation)

# lets load webmock as soon as possible,
# because we load all test helpers (yikes) in support/test_helpers.rb
# and there the webmock is not initialized properly
require_relative 'webmock'
