version: 2.0

#### YAML ANCHORS INSTEAD OF COMMANDS # while version 2.1 already supports commands, the local runner doesn't. When it does, we can upgrade.

git-submodules: &git-submodules
  run:
    name: "Pull Submodules"
    command: |
      git submodule init
      git submodule update

upload-coverage: &upload-coverage
  run:
    name: Upload test coverage to Codecov
    command: bash <(curl -s https://codecov.io/bash)

store-junit-results: &store-junit-test-results
  store_test_results:
    path: tmp/junit

store-test-artifacts: &store-test-artifacts
  store_artifacts:
    path: tmp/junit
    destination: junit

store-log-artifacts: &store-log-artifacts
  store_artifacts:
    path: log
    destination: log

restore-bundler-cache: &restore-bundler-cache
  restore_cache:
    keys:
      - v1-bundler-gems-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
restore-npm-cache: &restore-npm-cache
  restore_cache:
    keys:
      - v1-npm-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}

rails-tests: &rails-tests
  run:
    name: Rails tests
    command: |
      TESTS=$(bundle exec rake "test:files:$CIRCLE_JOB" | circleci tests split --split-by=timings)
      bundle exec rake test:run TESTS="$TESTS" TESTOPTS=--verbose --verbose --trace
    environment:
      LC_ALL: en_US.UTF-8

rails-tests-oracle: &rails-tests-oracle
  run:
    name: Rails tests
    command: |
      TESTS=$(bundle exec rake "test:files:${CIRCLE_JOB%-oracle}" | circleci tests split --split-by=timings)
      DB=oracle bundle exec rake test:run TESTS="$TESTS" TESTOPTS=--verbose --verbose --trace
    environment:
      LC_ALL: en_US.UTF-8

attach-to-workspace: &attach-to-workspace
  attach_workspace:
    at: .

system-builder: &system-builder
  image: quay.io/3scale/system-builder:latest
  environment:
    BUNDLE_FROZEN: true
    BUNDLE_PATH: 'vendor/bundle'
    DISABLE_SPRING: "true"
    ORACLE_SYSTEM_PASSWORD: threescalepass
    NLS_LANG: AMERICAN_AMERICA.UTF8
    TZ: UTC
    MASTER_PASSWORD: p
    USER_PASSWORD: p

mysql-container: &mysql-container
  image: circleci/mysql:5.7-ram
  environment:
    MYSQL_ALLOW_EMPTY_PASSWORD: yes
    MYSQL_ROOT_PASSWORD: ''
    MYSQL_DATABASE: circleci

oracle-db-container: &oracle-db-container
  image: quay.io/3scale/oracle:12.2.0.1-ee-scripted
  auth:
    username: $DOCKER_USER
    password: $DOCKER_PASS
  environment:
    ORACLE_CHARACTERSET: 'AL32UTF8'
    ORACLE_SID: 'threescale'
    ORACLE_PDB: 'systempdb'
    ORACLE_PWD: 'threescalepass'
  command: |
    bash -c "sed -i.bak 's|2048|6144|g' /opt/oracle/dbca.rsp.tmpl && exec /opt/oracle/runOracle.sh"

clone-oracle-libs: &clone-oracle-libs
  run:
    name: "Fetch oracle libraries"
    command: |
      git clone git@github.com:3scale/system-libraries.git
      cp -R system-libraries/vendor/oracle/*.zip vendor/oracle
      sudo unzip vendor/oracle/instantclient-basiclite-linux.x64-12.2.0.1.0.zip -d /opt/oracle
      sudo unzip vendor/oracle/instantclient-sdk-linux.x64-12.2.0.1.0.zip -d /opt/oracle
      sudo unzip vendor/oracle/instantclient-odbc-linux.x64-12.2.0.1.0-2.zip -d /opt/oracle
      sudo ln -s /opt/oracle/instantclient_12_2/libclntsh.so.12.1 /opt/oracle/instantclient_12_2/libclntsh.so
      sudo rm -rf /opt/system/vendor/oracle
      rm -rf vendor/oracle/*.zip
      sudo cp config/oracle/*.ini /etc/

jobs:
  dependencies_bundler:
    docker:
      - *system-builder
    steps:
      - checkout
      - *git-submodules
      - *restore-bundler-cache
      - run:
          name: Install gems with bundler
          command: |
            bundle check || bundle install --deployment
            bundle clean
            # remove capybara-webkit source, save more than 400 MB
            rm -rf "$BUNDLE_PATH/$(ruby -e 'puts Gem.ruby_engine')/$(ruby -e 'puts Gem.ruby_api_version')"/gems/capybara-webkit-*/src
          environment:
            BUNDLE_RETRY: 3
            BUNDLE_JOBS: 3
      - save_cache:
          key: v1-bundler-gems-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - ./vendor/bundle
            - ./.bundle/
      - persist_to_workspace:
          root: .
          paths:
          - ./vendor/bundle
          - ./.bundle/
  deps_bundler_oracle:
    docker:
      - *system-builder
    steps:
      - checkout
      - *git-submodules
      - *restore-bundler-cache
      - add_ssh_keys:
          fingerprints:
          - "36:6a:7a:93:88:52:12:dd:4c:84:3a:42:bf:8c:c3:58"
      - *clone-oracle-libs
      - run:
          name: Install gems with bundler
          command: |
            DB=oracle bundle check || DB=oracle bundle install --deployment
            DB=oracle bundle clean
            # remove capybara-webkit source, save more than 400 MB
            rm -rf "$BUNDLE_PATH/$(ruby -e 'puts Gem.ruby_engine')/$(ruby -e 'puts Gem.ruby_api_version')"/gems/capybara-webkit-*/src
          environment:
            BUNDLE_RETRY: 3
            BUNDLE_JOBS: 3
      - save_cache:
          key: v1-bundler-gems-oracle-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - ./vendor/bundle
            - ./.bundle/
      - persist_to_workspace:
          root: .
          paths:
          - ./vendor/bundle
          - ./.bundle/
  dependencies_npm:
    docker:
      - *system-builder
    steps:
      - checkout
      - *git-submodules
      - *restore-npm-cache
      - run:
          name: Install NPM dependencies
          command: |
            yarn --version
            yarn global dir
            yarn install --frozen-lockfile --link-duplicates
            jspm -v
            jspm dl-loader
            jspm install --lock || jspm install --force
      - save_cache:
          key: v1-npm-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - ./node_modules
            - ./assets/jspm_packages
            - ./.jspm
      - persist_to_workspace:
          root: .
          paths:
            - ./node_modules
            - ./assets/jspm_packages
            - ./.jspm

  assets_precompile:
    docker:
      - *system-builder
    steps:
      - checkout
      - *git-submodules
      - *attach-to-workspace
      - run:
          name: Precompile assets
          command: |
            cp config/examples/*.yml config/
            bundle exec rake assets:precompile RAILS_ENV=test 
            bundle exec rake assets:precompile RAILS_ENV=production WEBPACKER_PRECOMPILE=false
          environment:
            RAILS_GROUPS: assets 
      - persist_to_workspace:
          root: .
          paths:
            - ./public/assets
            - ./config/*.yml

  lint:
    docker:
      - *system-builder
#      - *mysql-container
#      - image: memcached:1.5-alpine
#      - image: redis:4.0-alpine
    steps:
      - run:
          name: Start Xvfb
          command: Xvfb :99 -screen 0 1280x1024x24
          background: true
      - checkout
      - *git-submodules
      - *attach-to-workspace
      - run:
          name: Licences check
          command: bundle exec rake ci:license_finder:run
      - run:
          name: Swagger validation
          command: |
            bundle exec rake doc:swagger:validate:all
            bundle exec rake doc:swagger:generate:all
      - run:
          name: JSPM
          command: |
            bundle exec rake ci:jspm --trace
      - run:
          name: Yarn test
          command: |
            yarn test -- --reporters dots,junit --browsers Firefox
            yarn jest
      - *store-junit-test-results
      - *store-test-artifacts
      - store_artifacts:
          path: doc/licenses
          destination: licenses
      - store_artifacts:
          path: doc/active_docs
          destination: active_docs
      - *upload-coverage

  unit:
    parallelism: 8
    resource_class: small
    docker:
      - *system-builder
      - *mysql-container
      - image: memcached:1.5-alpine
      - image: redis:4.0-alpine
    steps:
      - checkout
      - *git-submodules
      - *attach-to-workspace
      - run:
          name: Prepare database & config files
          command: |
            cp config/examples/*.yml config/
            bundle exec rake db:create db:test:prepare
      - *rails-tests
      - *store-junit-test-results
      - *store-test-artifacts
      - *store-log-artifacts
      - *upload-coverage
  unit-oracle:
    parallelism: 6
    resource_class: large
    docker:
    - *system-builder
    - *oracle-db-container
    - image: memcached:1.5-alpine
    - image: redis:4.0-alpine
    steps:
    - checkout
    - *git-submodules
    - *attach-to-workspace
    - add_ssh_keys:
        fingerprints:
        - "36:6a:7a:93:88:52:12:dd:4c:84:3a:42:bf:8c:c3:58"
    - *clone-oracle-libs
    - run:
        name: Prepare database & config files
        command: |
          cp config/examples/*.yml config/
          DB=oracle bundle exec rake ci:db:ready db:create db:test:prepare
    - *rails-tests-oracle
    - *store-junit-test-results
    - *store-test-artifacts
    - *store-log-artifacts
    - *upload-coverage

  functional:
    parallelism: 2
    resource_class: small
    docker:
      - *system-builder
      - *mysql-container
      - image: memcached:1.5-alpine
      - image: redis:4.0-alpine
    steps:
      - checkout
      - *git-submodules
      - *attach-to-workspace
      - run:
          name: Prepare database & config files
          command: |
            cp config/examples/*.yml config/
            bundle exec rake db:create db:test:prepare
      - *rails-tests
      - *store-junit-test-results
      - *store-test-artifacts
      - *store-log-artifacts
      - *upload-coverage
  functional-oracle:
    parallelism: 2
    resource_class: large
    docker:
    - *system-builder
    - *oracle-db-container
    - image: memcached:1.5-alpine
    - image: redis:4.0-alpine
    steps:
    - checkout
    - *git-submodules
    - *attach-to-workspace
    - add_ssh_keys:
        fingerprints:
        - "36:6a:7a:93:88:52:12:dd:4c:84:3a:42:bf:8c:c3:58"
    - *clone-oracle-libs
    - run:
        name: Prepare database & config files
        command: |
          cp config/examples/*.yml config/
          DB=oracle bundle exec rake ci:db:ready db:create db:test:prepare
    - *rails-tests-oracle
    - *store-junit-test-results
    - *store-test-artifacts
    - *store-log-artifacts
    - *upload-coverage

  integration:
    parallelism: 8
    resource_class: small
    docker:
      - *system-builder
      - *mysql-container
      - image: memcached:1.5-alpine
      - image: redis:4.0-alpine
    steps:
      - checkout
      - *git-submodules
      - *attach-to-workspace
      - run:
          name: Prepare database & config files
          command: |
            cp config/examples/*.yml config/
            bundle exec rake db:create db:test:prepare
      - *rails-tests
      - *store-junit-test-results
      - *store-test-artifacts
      - *store-log-artifacts
      - *upload-coverage
  integration-oracle:
    parallelism: 6
    resource_class: large
    docker:
    - *system-builder
    - *oracle-db-container
    - image: memcached:1.5-alpine
    - image: redis:4.0-alpine
    steps:
    - checkout
    - *git-submodules
    - *attach-to-workspace
    - add_ssh_keys:
        fingerprints:
        - "36:6a:7a:93:88:52:12:dd:4c:84:3a:42:bf:8c:c3:58"
    - *clone-oracle-libs
    - run:
        name: Prepare database & config files
        command: |
          cp config/examples/*.yml config/
          DB=oracle bundle exec rake ci:db:ready db:create db:test:prepare
    - *rails-tests-oracle
    - *store-junit-test-results
    - *store-test-artifacts
    - *store-log-artifacts
    - *upload-coverage


  rspec:
    parallelism: 3
    resource_class: small
    docker:
      - *system-builder
      - *mysql-container
      - image: memcached:1.5-alpine
      - image: redis:4.0-alpine
    steps:
      - checkout
      - *git-submodules
      - *attach-to-workspace
      - run:
          name: Prepare database & config files
          command: |
            cp config/examples/*.yml config/
            bundle exec rake db:create db:test:prepare
      - run:
          name: Rspec tests
          command: |
            bundle exec rspec --format progress $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
      - *store-junit-test-results
      - *store-test-artifacts
      - *store-log-artifacts
      - *upload-coverage
  rspec-oracle:
    parallelism: 4
    resource_class: large
    docker:
      - *system-builder
      - *oracle-db-container
      - image: memcached:1.5-alpine
      - image: redis:4.0-alpine
    steps:
      - checkout
      - *git-submodules
      - *attach-to-workspace
      - add_ssh_keys:
          fingerprints:
          - "36:6a:7a:93:88:52:12:dd:4c:84:3a:42:bf:8c:c3:58"
      - *clone-oracle-libs
      - run:
          name: Prepare database & config files
          command: |
            cp config/examples/*.yml config/
            DB=oracle bundle exec rake ci:db:ready db:create db:test:prepare
      - run:
          name: Rspec tests
          command: |
            DB=oracle bundle exec rspec --format progress $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
      - *store-junit-test-results
      - *store-test-artifacts
      - *store-log-artifacts
      - *upload-coverage



  cucumber:
    parallelism: 40
    resource_class: small
    docker:
      - *system-builder
      - image: quay.io/mikz/dnsmasq
        command:
        - --no-poll
        - --address=/#/127.0.0.1
      - *mysql-container
      - image: memcached:1.5-alpine
      - image: redis:4.0-alpine
    steps:
      - checkout
      - *git-submodules
      - *attach-to-workspace
      - run:
          name: Prepare database
          command: |
            bundle exec rake db:create db:test:prepare
      - run:
          name: Disable internet access
          command: sudo sed -c -i".bak" 's/127\.0\.0\.11$/127.0.0.1/' /etc/resolv.conf
      - run:
          name: Run cucumber tests
          command: |
            TESTS=$(circleci tests glob "features/**/*.feature" | circleci tests split --split-by=timings)
            bundle exec cucumber --profile ci ${TESTS}
      - run:
          name: Enabled internet access
          command: sudo sed -c -i".bak" 's/127\.0\.0\.1$/127.0.0.11/' /etc/resolv.conf
          when: always
      - *store-junit-test-results
      - *store-test-artifacts
      - *store-log-artifacts
      - store_artifacts:
          path: tmp/capybara
          destination: capybara
      - *upload-coverage
  cucumber-oracle:
    parallelism: 30
    resource_class: large
    docker:
      - *system-builder
      - image: quay.io/mikz/dnsmasq
        command:
        - --no-poll
        - --address=/#/127.0.0.1
      - *oracle-db-container
      - image: memcached:1.5-alpine
      - image: redis:4.0-alpine
    steps:
      - checkout
      - *git-submodules
      - *attach-to-workspace
      - add_ssh_keys:
          fingerprints:
          - "36:6a:7a:93:88:52:12:dd:4c:84:3a:42:bf:8c:c3:58"
      - *clone-oracle-libs
      - run:
          name: Prepare database
          command: |
            DB=oracle bundle exec rake ci:db:ready db:create db:test:prepare
      - run:
          name: Disable internet access
          command: sudo sed -c -i".bak" 's/127\.0\.0\.11$/127.0.0.1/' /etc/resolv.conf
      - run:
          name: Run cucumber tests
          command: |
            TESTS=$(circleci tests glob "features/**/*.feature" | circleci tests split --split-by=timings)
            DB=oracle bundle exec cucumber --profile ci ${TESTS}
      - run:
          name: Enabled internet access
          command: sudo sed -c -i".bak" 's/127\.0\.0\.1$/127.0.0.11/' /etc/resolv.conf
          when: always
      - *store-junit-test-results
      - *store-test-artifacts
      - *store-log-artifacts
      - store_artifacts:
          path: tmp/capybara
          destination: capybara
      - *upload-coverage


  docker-build:
    resource_class: small
    docker:
      - image: docker:stable
        environment:
          DOCKER_COMPOSE: /usr/bin/docker-compose
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build System Container Image for OpenShift
          command: |
            cd openshift/system
            docker build --build-arg=BUNDLER_ENV="$(env | grep -e ^BUNDLE_)" --file Dockerfile ../..
            docker build --file Dockerfile.on_prem --pull ../..
  visual:
    parallelism: 1
    resource_class: small
    docker:
      - *system-builder
      - image: quay.io/mikz/dnsmasq
        command:
        - --no-poll
        - --address=/#/127.0.0.1
        - --server=/percy.io/8.8.8.8
      - image: circleci/mysql:5.7-ram
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_ROOT_PASSWORD: ''
          MYSQL_DATABASE: circleci
      - image: memcached:1.5-alpine
      - image: redis:4.0-alpine
    steps:
      - checkout
      - *git-submodules
      - *attach-to-workspace
      - run:
          name: Prepare database
          command: |
            bundle exec rake db:create db:test:prepare
      - run:
          name: Disable internet access
          command: sudo sed -c -i".bak" 's/127\.0\.0\.11$/127.0.0.1/' /etc/resolv.conf
      - run:
          name: Run percy.io visual tests
          command: |
            PERCY_PROJECT=3scale/porta PERCY_BRANCH=$CIRCLE_BRANCH PERCY_COMMIT=$CIRCLE_SHA1 PERCY_ENABLE=1 bundle exec cucumber --profile ci --profile visual features
      - run:
          name: Enabled internet access
          command: sudo sed -c -i".bak" 's/127\.0\.0\.1$/127.0.0.11/' /etc/resolv.conf
          when: always
      - *store-junit-test-results
      - *store-test-artifacts
      - *store-log-artifacts
      - store_artifacts:
          path: tmp/capybara
          destination: capybara
      - *upload-coverage

workflows:
  version: 2
  mysql_build:
    jobs:
      - dependencies_bundler
      - dependencies_npm
      - docker-build:
          context: org-global
      - assets_precompile:
          requires:
            - dependencies_bundler
            - dependencies_npm

      - lint:
          requires:
            - assets_precompile
      - unit:
          requires:
            - dependencies_bundler
      - functional:
          requires:
            - assets_precompile
      - integration:
          requires:
            - assets_precompile
      - rspec:
          requires:
            - dependencies_bundler
      - cucumber:
          requires:
            - assets_precompile
  oracle_build:
    jobs:
      - manual_approval: # <<< A job that will require manual approval in the CircleCI web application.
          type: approval # <<< This key-value pair will set your workflow to a status of "On Hold"
        # On approval of the `hold` job, any successive job that requires the `hold` job will run.
      - deps_bundler_oracle:
          requires:
          - manual_approval
      - dependencies_npm:
          requires:
          - manual_approval
      - docker-build:
          context: org-global
          requires:
          - manual_approval
      - assets_precompile:
          requires:
            - deps_bundler_oracle
            - dependencies_npm

      - lint:
          requires:
            - assets_precompile
      - unit-oracle:
          requires:
            - deps_bundler_oracle
      - functional-oracle:
          requires:
            - assets_precompile
      - integration-oracle:
          requires:
            - assets_precompile
      - rspec-oracle:
          requires:
            - deps_bundler_oracle
      - cucumber-oracle:
          requires:
            - assets_precompile
  visual_tests:
    jobs:
    - manual_approval: # <<< A job that will require manual approval in the CircleCI web application.
        type: approval # <<< This key-value pair will set your workflow to a status of "On Hold"
      # On approval of the `hold` job, any successive job that requires the `hold` job will run.
    - dependencies_bundler:
        requires:
        - manual_approval
    - dependencies_npm:
        requires:
        - manual_approval
    - assets_precompile:
        requires:
        - dependencies_bundler
        - dependencies_npm
    - visual:
        context: percy
        requires:
        - assets_precompile

