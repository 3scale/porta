version: 2.0

#### YAML ANCHORS INSTEAD OF COMMANDS # while version 2.1 already supports commands, the local runner doesn't. When it does, we can upgrade.

git-submodules: &git-submodules
  run:
    name: "Pull Submodules"
    command: |
      git submodule init
      git submodule update

store-junit-results: &store-junit-test-results
  store_test_results:
    path: tmp/junit

store-test-artifacts: &store-test-artifacts
  store_artifacts:
    path: tmp/junit
    destination: junit

restore-bundler-cache: &restore-bundler-cache
  restore_cache:
    keys:
      - 3scale-system-bundler-gems-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
restore-npm-cache: &restore-npm-cache
  restore_cache:
    keys:
      - 3scale-system-npm_jspm-{{ .Branch }}-{{ checksum "package.json" }}
restore-gateway-cache: &restore-gateway-cache
  restore_cache:
    keys:
      - 3scale-system-gateway-{{ .Branch }}-{{ .Revision }}
restore-assets-cache: &restore-assets-cache
  restore_cache:
    keys:
      - 3scale-system-assets-{{ .Branch }}-{{ .Revision }}





jobs:
  dependencies_bundler:
    machine:
      docker_layer_caching: true
    steps:
      - checkout
      - *git-submodules
      - *restore-bundler-cache
      - run:
          name: Install gems with bundler
          command: make bundle-in-container
      - save_cache:
          key: 3scale-system-bundler-gems-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - ./vendor/bundle
            - ./.bundle/
  dependencies_npm:
    machine:
      docker_layer_caching: true
    steps:
      - checkout
      - *git-submodules
      - *restore-npm-cache
      - run:
          name: Install NPM dependencies
          command: make npm-install-in-container
      - save_cache:
          key: 3scale-system-npm_jspm-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - ./node_modules
            - ./assets/jspm_packages
            - ./.jspm
  dependencies_apicast:
    machine:
      docker_layer_caching: true
    steps:
      - checkout
      - *git-submodules
      - *restore-gateway-cache
      - run:
          name: Install Apicast dependencies
          command: make apicast-dependencies-in-container
      - save_cache:
          key: 3scale-system-gateway-{{ .Branch }}-{{ .Revision }}
          paths:
            - ./vendor/docker-gateway/.luarocks
  assets_precompile:
    machine:
      docker_layer_caching: true
    steps:
      - checkout
      - *git-submodules
      - *restore-bundler-cache
      - *restore-npm-cache
      - *restore-gateway-cache
      - *restore-assets-cache
      - run:
          name: Precompile assets
          command: make precompile-assets
      - save_cache:
          key: 3scale-system-assets-{{ .Branch }}-{{ .Revision }}
          paths:
            - ./public/assets


  test1:
    machine:
      docker_layer_caching: true
    steps:
      - checkout
      - *git-submodules
      - *restore-bundler-cache
      - *restore-npm-cache
      - *restore-gateway-cache
      - *restore-assets-cache
      - run:
          name: Run tests 1
          command: MULTIJOB_KIND=1 make test-no-deps
      - *store-junit-test-results
      - *store-test-artifacts

  test2:
    machine:
      docker_layer_caching: true
    steps:
      - checkout
      - *git-submodules
      - *restore-bundler-cache
      - *restore-npm-cache
      - *restore-gateway-cache
      - *restore-assets-cache
      - run:
          name: Run tests 2
          command: MULTIJOB_KIND=2 make test-no-deps
      - *store-junit-test-results
      - *store-test-artifacts

  test3:
    machine:
      docker_layer_caching: true
    steps:
      - checkout
      - *git-submodules
      - *restore-bundler-cache
      - *restore-npm-cache
      - *restore-gateway-cache
      - *restore-assets-cache
      - run:
          name: Run tests 3
          command: MULTIJOB_KIND=3 make test-no-deps
      - *store-junit-test-results
      - *store-test-artifacts

  test4:
    machine:
      docker_layer_caching: true
    steps:
      - checkout
      - *git-submodules
      - *restore-bundler-cache
      - *restore-npm-cache
      - *restore-gateway-cache
      - *restore-assets-cache
      - run:
          name: Run tests 4
          command: MULTIJOB_KIND=4 make test-no-deps
      - *store-junit-test-results
      - *store-test-artifacts

  test5:
    machine:
      docker_layer_caching: true
    steps:
      - checkout
      - *git-submodules
      - *restore-bundler-cache
      - *restore-npm-cache
      - *restore-gateway-cache
      - *restore-assets-cache
      - run:
          name: Run tests 5
          command: MULTIJOB_KIND=5 make test-no-deps
      - *store-junit-test-results
      - *store-test-artifacts

  test6:
    machine:
      docker_layer_caching: true
    steps:
      - checkout
      - *git-submodules
      - *restore-bundler-cache
      - *restore-npm-cache
      - *restore-gateway-cache
      - *restore-assets-cache
      - run:
          name: Run tests 6
          command: MULTIJOB_KIND=6 make test-no-deps
      - *store-junit-test-results
      - *store-test-artifacts

  licenses:
    machine:
      docker_layer_caching: true
    steps:
      - checkout
      - *git-submodules
      - *restore-bundler-cache
      - *restore-npm-cache
      - *restore-gateway-cache
      - *restore-assets-cache
      - run:
          name: Run tests 7
          command: PROXY_ENABLED=1 MULTIJOB_KIND=licenses make test-no-deps
      - *store-junit-test-results
      - *store-test-artifacts

workflows:
  version: 2
  parallel_build:
    jobs:
      - dependencies_bundler
      - dependencies_npm
      - dependencies_apicast
      - assets_precompile:
          requires:
            - dependencies_bundler
            - dependencies_npm
            - dependencies_apicast

      - test1:
          requires:
            - assets_precompile
      - test2:
          requires:
            - assets_precompile
      - test3:
          requires:
            - assets_precompile
      - test4:
          requires:
            - assets_precompile
      - test5:
          requires:
            - assets_precompile
      - test6:
          requires:
            - assets_precompile
      - licenses:
          requires:
            - assets_precompile
