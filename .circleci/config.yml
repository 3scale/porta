version: 2.1

##################################### YAML ANCHORS  ############################################

upload-coverage: &upload-coverage
  run:
    name: Upload test coverage to Codecov
    command: bash <(curl -s https://codecov.io/bash)

persist-vendored-dependencies-to-workspace: &persist-vendored-dependencies-to-workspace
  persist_to_workspace:
    root: .
    paths:
      - ./vendor/bundle
      - ./.bundle/

store-junit-results: &store-junit-test-results
  store_test_results:
    path: tmp/junit

store-test-artifacts: &store-test-artifacts
  store_artifacts:
    path: tmp/junit
    destination: junit

store-log-artifacts: &store-log-artifacts
  store_artifacts:
    path: log
    destination: log

restore-npm-cache: &restore-npm-cache
  restore_cache:
    keys:
      - v1-npm-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}

use-example-config-files: &use-example-config-files
  run:
    name: Copy example config files into place to be used by tests
    command: |
      cp config/examples/*.yml config/

disable-internet-access: &disable-internet-access
  run:
    name: Disable internet access
    command: sudo sed -c -i".bak" 's/127\.0\.0\.11$/127.0.0.1/' /etc/resolv.conf

enable-internet-access: &enable-internet-access
  run:
    name: Enabled internet access
    command: sudo sed -c -i".bak" 's/127\.0\.0\.1$/127.0.0.11/' /etc/resolv.conf
    when: always

attach-to-workspace: &attach-to-workspace
  attach_workspace:
    at: .

system-builder: &system-builder
  image: quay.io/3scale/system-builder:headless
  environment:
    BUNDLE_FROZEN: true
    BUNDLE_PATH: 'vendor/bundle'
    DISABLE_SPRING: "true"
    ORACLE_SYSTEM_PASSWORD: threescalepass
    NLS_LANG: AMERICAN_AMERICA.UTF8
    TZ: UTC
    MASTER_PASSWORD: p
    USER_PASSWORD: p
    LC_ALL: en_US.UTF-8

mysql-container: &mysql-container
  image: circleci/mysql:5.7-ram
  environment:
    MYSQL_ALLOW_EMPTY_PASSWORD: yes
    MYSQL_ROOT_PASSWORD: ''
    MYSQL_DATABASE: circleci

postgres-container: &postgres-container
  image: circleci/postgres:10.5-alpine
  environment:
    POSTGRES_USER: postgres
    POSTGRES_DB: systemdb

oracle-db-container: &oracle-db-container
  image: quay.io/3scale/oracle:12.2.0.1-ee-scripted
  auth:
    username: $DOCKER_USER
    password: $DOCKER_PASS
  environment:
    ORACLE_CHARACTERSET: 'AL32UTF8'
    ORACLE_SID: 'threescale'
    ORACLE_PDB: 'systempdb'
    ORACLE_PWD: 'threescalepass'
  command: |
    bash -c "sed -i.bak 's|2048|6144|g' /opt/oracle/dbca.rsp.tmpl && exec /opt/oracle/runOracle.sh"

memcached-container: &memcached-container
  image: memcached:1.5-alpine

redis-container: &redis-container
  image: redis:4.0-alpine

dnsmasq-container: &dnsmasq-container
  image: quay.io/mikz/dnsmasq
  command:
    - --no-poll
    - --address=/#/127.0.0.1

only-master-filter: &only-master-filter
  filters:
    branches:
      only: master

##################################### CIRCLECI COMMANDS ############################################

commands: # reusable commands with parameters

  checkout-with-submodules:
    steps:
      - checkout
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update

  install-gem-dependencies:
    parameters:
      extra-deps:
        description: "Steps that will be executed in case extra dependencies."
        type: steps
        default: []
    steps:
      - checkout-with-submodules
      - restore-gem-cache
      - steps: << parameters.extra-deps >>
      - run:
          name: Install gems with bundler
          command: |
            echo "Running gems install for database: $DB"
            bundle check || bundle install --deployment
            bundle clean
            # remove capybara-webkit source, save more than 400 MB
            rm -rf "$BUNDLE_PATH/$(ruby -e 'puts Gem.ruby_engine')/$(ruby -e 'puts Gem.ruby_api_version')"/gems/capybara-webkit-*/src
          environment:
            BUNDLE_RETRY: 3
            BUNDLE_JOBS: 3
      - save-gem-cache
      - *persist-vendored-dependencies-to-workspace

  clone-oracle-libraries:
    steps:
      - add_ssh_keys:
          fingerprints:
            - "36:6a:7a:93:88:52:12:dd:4c:84:3a:42:bf:8c:c3:58"
      - run:
          name: "Fetch oracle libraries"
          command: |
            git clone git@github.com:3scale/system-libraries.git
            cp -R system-libraries/vendor/oracle/*.zip vendor/oracle
            # using sudo due to `/opt/oracle/` set in: https://github.com/3scale/system-builder/blob/1bc3cec26bff04e0603e1a4908594b70a114dfe8/Dockerfile#L16-L17
            sudo unzip vendor/oracle/instantclient-basiclite-linux.x64-12.2.0.1.0.zip -d /opt/oracle
            sudo unzip vendor/oracle/instantclient-sdk-linux.x64-12.2.0.1.0.zip -d /opt/oracle
            sudo unzip vendor/oracle/instantclient-odbc-linux.x64-12.2.0.1.0-2.zip -d /opt/oracle
            sudo ln -s /opt/oracle/instantclient_12_2/libclntsh.so.12.1 /opt/oracle/instantclient_12_2/libclntsh.so
            sudo rm -rf /opt/system/vendor/oracle
            rm -rf vendor/oracle/*.zip
            sudo cp config/oracle/*.ini /etc/

  prepare-db-for-tests:
    steps:
      - run:
          name: Prepare database for tests
          command: |
            echo "Running for database: $DB"
            bundle exec rake ci:db:ready db:create db:test:prepare

  rspec-tests:
    parameters:
      extra-deps:
        description: "Steps that will be executed in case extra dependencies are required, e.g. to connect to db."
        type: steps
        default: []
    steps:
      - checkout-with-submodules
      - *attach-to-workspace
      - *use-example-config-files
      - steps: << parameters.extra-deps >>
      - prepare-db-for-tests
      - run:
          name: Rspec tests
          command: |
            bundle exec rspec --format progress $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
      - upload-artifacts

  cucumber-tests:
    parameters:
      extra-deps:
        description: "Steps that will be executed in case extra dependencies are required, e.g. to connect to db."
        type: steps
        default: []
    steps:
      - checkout-with-submodules
      - *attach-to-workspace
      - steps: << parameters.extra-deps >>
      - prepare-db-for-tests
      - *disable-internet-access
      - run:
          name: Run cucumber tests
          command: |
            TESTS=$(circleci tests glob "features/**/*.feature" | circleci tests split --split-by=timings)
            bundle exec cucumber --profile ci ${TESTS}
      - *enable-internet-access
      - upload-artifacts
      - store_artifacts:
          path: tmp/capybara
          destination: capybara

  rails-tests:
    parameters:
      extra-deps:
        description: "Steps that will be executed in case extra dependencies are required, e.g. to connect to db."
        type: steps
        default: []
    steps:
      - checkout-with-submodules
      - *attach-to-workspace
      - *use-example-config-files
      - steps: << parameters.extra-deps >>
      - prepare-db-for-tests
      - run:
          name: Run Rails tests
          command: |
            shopt -s extglob
            TESTS=$(bundle exec rake "test:files:${CIRCLE_JOB%-@(postgres|oracle)}" | circleci tests split --split-by=timings)
            bundle exec rake test:run TESTS="$TESTS" TESTOPTS=--verbose --verbose --trace
      - upload-artifacts

  save-gem-cache:
    steps:
      - save_cache:
          key: v1-bundler-gems-{{ .Environment.DB }}-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}-{{ checksum "gemfiles/prod/Gemfile.lock" }}
          paths:
            - ./vendor/bundle
            - ./.bundle/

  restore-gem-cache:
    steps:
      - restore_cache:
          keys:
            - v1-bundler-gems-{{ .Environment.DB }}-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}-{{ checksum "gemfiles/prod/Gemfile.lock" }}

  upload-artifacts:
    steps:
      - *store-junit-test-results
      - *store-test-artifacts
      - *store-log-artifacts
      - *upload-coverage

##################################### CIRCLECI EXECUTORS ############################################

executors:
  builder:
    parameters:
      database:
        type: string
        default: mysql
    docker:
      - *system-builder
    environment:
      DB: << parameters.database >>
    working_directory: /opt/app-root/src/project

  builder-with-mysql:
    resource_class: small
    docker:
      - *system-builder
      - *mysql-container
      - *memcached-container
      - *redis-container
    working_directory: /opt/app-root/src/project
    environment:
      DB: mysql

  builder-with-postgres:
    resource_class: small
    docker:
      - *system-builder
      - *postgres-container
      - *memcached-container
      - *redis-container
    working_directory: /opt/app-root/src/project
    environment:
      DB: postgresql

  builder-with-oracle:
    resource_class: large
    docker:
      - *system-builder
      - *oracle-db-container
      - *memcached-container
      - *redis-container
    working_directory: /opt/app-root/src/project
    environment:
      DB: oracle

##################################### CIRCLECI JOBS ############################################

jobs:
  dependencies_bundler:
    executor:
      name: builder
      database: mysql
    steps:
      - install-gem-dependencies

  deps_bundler_postgres:
    executor:
      name: builder
      database: postgresql
    steps:
      - install-gem-dependencies

  deps_bundler_oracle:
    executor:
      name: builder
      database: oracle
    steps:
      - install-gem-dependencies:
          extra-deps:
            - clone-oracle-libraries

  dependencies_npm:
    executor: builder
    steps:
      - checkout-with-submodules
      - *restore-npm-cache
      - run:
          name: Install NPM dependencies
          command: |
            npm --version
            npm install
            npm dedupe
      - save_cache:
          key: v1-npm-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - ./node_modules
            - ./flow-typed
      - persist_to_workspace:
          root: .
          paths:
            - ./node_modules
            - ./flow-typed

  assets_precompile:
    executor: builder
    steps:
      - checkout-with-submodules
      - *attach-to-workspace
      - run:
          name: Precompile assets
          command: |
            cp config/examples/*.yml config/
            bundle exec rake assets:precompile RAILS_ENV=test
            bundle exec rake assets:precompile RAILS_ENV=production
          environment:
            RAILS_GROUPS: assets
      - persist_to_workspace:
          root: .
          paths:
            - ./public/assets
            - ./config/*.yml

  lint:
    executor: builder
    steps:
      - checkout-with-submodules
      - *attach-to-workspace
      - run:
          name: Licences check
          # `npm dedupe` fixes the errors raised by duplicated incompatible dependencies from different environments
          # when license_finder invokes `npm list --json --long --production` prior have installed development deps
          # needed to build webpack assets
          command: |
            npm dedupe
            bundle exec rake ci:license_finder:run
      - run:
          name: Swagger validation
          command: |
            bundle exec rake doc:swagger:validate:all
            bundle exec rake doc:swagger:generate:all
      - run:
          name: NPM test
          command: |
            npm test -- --reporters dots,junit --browsers ChromeHeadless
            npm run-script jest
      - *store-junit-test-results
      - *store-test-artifacts
      - store_artifacts:
          path: doc/licenses
          destination: licenses
      - store_artifacts:
          path: doc/active_docs
          destination: active_docs
      - *upload-coverage

  unit:
    parallelism: 8
    executor: builder-with-mysql
    steps:
      - rails-tests

  unit-postgres:
    parallelism: 8
    executor: builder-with-postgres
    steps:
      - rails-tests

  unit-oracle:
    parallelism: 6
    executor: builder-with-oracle
    steps:
      - rails-tests:
          extra-deps:
            - clone-oracle-libraries

  functional:
    parallelism: 2
    executor: builder-with-mysql
    steps:
      - rails-tests

  functional-postgres:
    parallelism: 2
    executor: builder-with-postgres
    steps:
      - rails-tests

  functional-oracle:
    parallelism: 2
    executor: builder-with-oracle
    steps:
      - rails-tests:
          extra-deps:
            - clone-oracle-libraries

  integration:
    parallelism: 8
    executor: builder-with-mysql
    steps:
      - rails-tests

  integration-postgres:
    parallelism: 8
    executor: builder-with-postgres
    steps:
      - rails-tests

  integration-oracle:
    parallelism: 6
    executor: builder-with-oracle
    steps:
      - rails-tests:
          extra-deps:
            - clone-oracle-libraries

  rspec:
    parallelism: 3
    executor: builder-with-mysql
    steps:
      - rspec-tests

  rspec-postgres:
    parallelism: 3
    executor: builder-with-postgres
    steps:
      - rspec-tests

  rspec-oracle:
    parallelism: 4
    executor: builder-with-oracle
    steps:
      - rspec-tests:
          extra-deps:
            - clone-oracle-libraries

  cucumber:
    parallelism: 40
    resource_class: small
    docker:
      - *system-builder
      - *dnsmasq-container
      - *mysql-container
      - *memcached-container
      - *redis-container
    environment:
      DB: mysql
    steps:
      - cucumber-tests

  cucumber-postgres:
    parallelism: 40
    resource_class: small
    docker:
      - *system-builder
      - *dnsmasq-container
      - *postgres-container
      - *memcached-container
      - *redis-container
    environment:
      DB: postgresql
    steps:
      - cucumber-tests

  cucumber-oracle:
    parallelism: 30
    resource_class: large
    docker:
      - *system-builder
      - *dnsmasq-container
      - *oracle-db-container
      - *memcached-container
      - *redis-container
    environment:
      DB: oracle
    steps:
      - cucumber-tests:
          extra-deps:
            - clone-oracle-libraries

  docker-build:
    resource_class: small
    docker:
      - image: docker:stable
        environment:
          DOCKER_COMPOSE: /usr/bin/docker-compose
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build System Container Image for OpenShift
          command: |
            cd openshift/system
            docker build --build-arg=BUNDLER_ENV="$(env | grep -e ^BUNDLE_)" --file Dockerfile ../..
            docker build --file Dockerfile.on_prem --pull ../..

  notify_start:
    docker:
      - image: circleci/buildpack-deps
    steps:
      - run:
          name: Notify Slack about tests start
          command: |
            curl -X POST -H 'Content-type: application/json' \
            --data \
            "{ \
              \"attachments\": [ \
              { \
                \"fallback\": \"Build started on master, for $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME.\", \
                \"color\": \"#D3D3D3\", \
                \"pretext\": \"Build started on master: \", \
                \"author_name\": \"$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME\", \
                \"title\": \"Job: $CIRCLE_JOB  \", \
                \"title_link\": \"$CIRCLE_BUILD_URL\", \
                \"text\": \"Changes: $CIRCLE_COMPARE_URL\", \
                \"fields\": [ \
                { \
                  \"title\": \"Commit\", \
                  \"value\": \"$CIRCLE_SHA1\", \
                  \"short\": false \
                }, \
                { \
                  \"title\": \"GitHub Repo\", \
                  \"value\": \"$CIRCLE_REPOSITORY_URL\", \
                  \"short\": false \
                }, \
                { \
                  \"title\": \"Triggered by:\", \
                  \"value\": \"$CIRCLE_USERNAME\", \
                  \"short\": false \
                } \
                ] \
              } \
              ] \
            }" $SLACK_WEBHOOK_URL

  notify_failure:
    docker:
      - image: circleci/buildpack-deps
    steps:
      - run:
          name: Notify Slack about tests failure
          command: |
            curl -X POST -H 'Content-type: application/json' \
            --data \
            "{ \
              \"attachments\": [ \
              { \
                \"fallback\": \"Build failed on $CIRCLE_BRANCH, for $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME.\", \
                \"color\": \"#CD0000\", \
                \"pretext\": \"Don't panic. Build failed on $CIRCLE_BRANCH !! \", \
                \"author_name\": \"$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME\", \
                \"title\": \"Job: $CIRCLE_JOB \", \
                \"title_link\": \"$CIRCLE_BUILD_URL\", \
                \"text\": \"$CIRCLE_BUILD_URL\", \
                \"fields\": [ \
                { \
                  \"title\": \"Commit\", \
                  \"value\": \"$CIRCLE_SHA1\", \
                  \"short\": false \
                } \
                ] \
              } \
              ] \
            }" $SLACK_WEBHOOK_URL
          when: on_fail

  notify_success:
    docker:
      - image: circleci/buildpack-deps
    steps:
      - run:
          name: Notify Slack about tests passing
          command: |
            curl -X POST -H 'Content-type: application/json' \
            --data \
            "{ \
              \"attachments\": [ \
              { \
                \"fallback\": \"All is well & green on $CIRCLE_BRANCH, for $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME.\", \
                \"color\": \"#00B700\", \
                \"pretext\": \"All is well & green on $CIRCLE_BRANCH. Nothing to see here. \", \
                \"author_name\": \"$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME\", \
                \"title\": \"Job: $CIRCLE_JOB \", \
                \"title_link\": \"$CIRCLE_BUILD_URL\", \
                \"text\": \"$CIRCLE_BUILD_URL\", \
                \"fields\": [ \
                { \
                  \"title\": \"Commit\", \
                  \"value\": \"$CIRCLE_SHA1\", \
                  \"short\": false \
                } \
                ] \
              } \
              ] \
            }" $SLACK_WEBHOOK_URL
          when: on_success

  visual:
    parallelism: 1
    resource_class: small
    docker:
      - *system-builder
      - image: quay.io/mikz/dnsmasq
        command:
          - --no-poll
          - --address=/#/127.0.0.1
          - --server=/percy.io/8.8.8.8
      - *mysql-container
      - *memcached-container
      - *redis-container
    steps:
      - checkout-with-submodules
      - *attach-to-workspace
      - prepare-db-for-tests
      - *disable-internet-access
      - run:
          name: Run percy.io visual tests
          command: |
            PERCY_PROJECT=3scale/porta PERCY_BRANCH=$CIRCLE_BRANCH PERCY_COMMIT=$CIRCLE_SHA1 PERCY_ENABLE=1 bundle exec cucumber --profile ci --profile visual features
      - *enable-internet-access
      - upload-artifacts
      - store_artifacts:
          path: tmp/capybara
          destination: capybara

##################################### CIRCLECI WORKFLOWS ############################################

workflows:
  version: 2

  mysql_build:
    jobs:
      - notify_start:
          <<: *only-master-filter
      - dependencies_bundler
      - dependencies_npm
      - docker-build:
          context: org-global
      - assets_precompile:
          requires:
            - dependencies_bundler
            - dependencies_npm
      - lint:
          requires:
            - assets_precompile
      - unit:
          requires:
            - dependencies_bundler
      - functional:
          requires:
            - assets_precompile
      - integration:
          requires:
            - assets_precompile
      - rspec:
          requires:
            - dependencies_bundler
      - cucumber:
          requires:
            - assets_precompile
      - notify_success:
          requires:
            - rspec
            - unit
            - cucumber
            - integration
            - functional
            - lint
          <<: *only-master-filter
      - notify_failure:
          requires:
            - rspec
            - unit
            - cucumber
            - integration
            - functional
            - lint
          <<: *only-master-filter

  postgres_build:
    jobs:
      - manual_approval: # <<< A job that will require manual approval in the CircleCI web application.
          type: approval # <<< This key-value pair will set your workflow to a status of "On Hold"
          # On approval of the `hold` job, any successive job that requires the `hold` job will run.
      - notify_start:
          requires:
            - manual_approval
          <<: *only-master-filter
      - deps_bundler_postgres:
          requires:
            - manual_approval
      - dependencies_npm:
          requires:
            - manual_approval
      - docker-build:
          context: org-global
          requires:
            - manual_approval
      - assets_precompile:
          requires:
            - deps_bundler_postgres
            - dependencies_npm
      - lint:
          requires:
            - assets_precompile
      - unit-postgres:
          requires:
            - deps_bundler_postgres
      - functional-postgres:
          requires:
            - assets_precompile
      - integration-postgres:
          requires:
            - assets_precompile
      - rspec-postgres:
          requires:
            - deps_bundler_postgres
      - cucumber-postgres:
          requires:
            - assets_precompile
      - notify_success:
          requires:
            - rspec-postgres
            - unit-postgres
            - cucumber-postgres
            - integration-postgres
            - functional-postgres
            - lint
          <<: *only-master-filter
      - notify_failure:
          requires:
            - rspec-postgres
            - unit-postgres
            - cucumber-postgres
            - integration-postgres
            - functional-postgres
            - lint
          <<: *only-master-filter

  oracle_build:
    jobs:
      - manual_approval: # <<< A job that will require manual approval in the CircleCI web application.
          type: approval # <<< This key-value pair will set your workflow to a status of "On Hold"
        # On approval of the `hold` job, any successive job that requires the `hold` job will run.
      - notify_start:
          requires:
            - manual_approval
          <<: *only-master-filter
      - deps_bundler_oracle:
          requires:
            - manual_approval
      - dependencies_npm:
          requires:
            - manual_approval
      - docker-build:
          context: org-global
          requires:
            - manual_approval
      - assets_precompile:
          requires:
            - deps_bundler_oracle
            - dependencies_npm

      - lint:
          requires:
            - assets_precompile
      - unit-oracle:
          requires:
            - deps_bundler_oracle
      - functional-oracle:
          requires:
            - assets_precompile
      - integration-oracle:
          requires:
            - assets_precompile
      - rspec-oracle:
          requires:
            - deps_bundler_oracle
      - cucumber-oracle:
          requires:
            - assets_precompile
      - notify_success:
          requires:
            - rspec-oracle
            - unit-oracle
            - cucumber-oracle
            - integration-oracle
            - functional-oracle
            - lint
          <<: *only-master-filter

      - notify_failure:
          requires:
            - rspec-oracle
            - unit-oracle
            - cucumber-oracle
            - integration-oracle
            - functional-oracle
            - lint
          <<: *only-master-filter

  visual_tests:
    jobs:
      - manual_approval: # <<< A job that will require manual approval in the CircleCI web application.
          type: approval # <<< This key-value pair will set your workflow to a status of "On Hold"
          # On approval of the `hold` job, any successive job that requires the `hold` job will run.
          filters:
            branches:
              ignore: master
      - dependencies_bundler:
          requires:
            - manual_approval
      - dependencies_npm:
          requires:
            - manual_approval
      - assets_precompile:
          requires:
            - dependencies_bundler
            - dependencies_npm
      - visual:
          context: percy
          requires:
            - assets_precompile

  visual_test-master:
    jobs:
      - dependencies_bundler:
          <<: *only-master-filter
      - dependencies_npm:
          <<: *only-master-filter
      - assets_precompile:
          requires:
            - dependencies_bundler
            - dependencies_npm
          <<: *only-master-filter
      - visual:
          context: percy
          requires:
            - assets_precompile
          <<: *only-master-filter
