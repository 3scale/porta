// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should render itself 1`] = `
<ActiveDocsSpec
  responseInterceptor={[MockFunction]}
  url="foo.example.com"
>
  <SwaggerUI
    responseInterceptor={[MockFunction]}
    url="foo.example.com"
  >
    <r>
      <Provider
        store={
          Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
        }
      >
        <Connect(r)>
          <r
            dispatch={[Function]}
            state={
              Immutable.Map {
                "layout": Immutable.Map {
                  "layout": "BaseLayout",
                  "filter": null,
                },
                "spec": Immutable.Map {
                  "spec": "",
                  "url": "foo.example.com",
                  "loadingStatus": "loading",
                },
                "configs": Immutable.Map {},
                "err": Immutable.Map {},
                "auth": Immutable.Map {},
                "oas3": Immutable.Map {},
              }
            }
          >
            <t
              Im={
                Object {
                  "Collection": [Function],
                  "Iterable": [Function],
                  "List": [Function],
                  "Map": [Function],
                  "OrderedMap": [Function],
                  "OrderedSet": [Function],
                  "Range": [Function],
                  "Record": [Function],
                  "Repeat": [Function],
                  "Seq": [Function],
                  "Set": [Function],
                  "Stack": [Function],
                  "fromJS": [Function],
                  "is": [Function],
                }
              }
              React={
                Object {
                  "Children": Object {
                    "count": [Function],
                    "forEach": [Function],
                    "map": [Function],
                    "only": [Function],
                    "toArray": [Function],
                  },
                  "Component": [Function],
                  "Fragment": Symbol(react.fragment),
                  "Profiler": Symbol(react.profiler),
                  "PureComponent": [Function],
                  "StrictMode": Symbol(react.strict_mode),
                  "Suspense": Symbol(react.suspense),
                  "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
                    "IsSomeRendererActing": Object {
                      "current": false,
                    },
                    "ReactComponentTreeHook": Object {},
                    "ReactCurrentBatchConfig": Object {
                      "suspense": null,
                    },
                    "ReactCurrentDispatcher": Object {
                      "current": Object {
                        "readContext": [Function],
                        "useCallback": [Function],
                        "useContext": [Function],
                        "useDebugValue": [Function],
                        "useDeferredValue": [Function],
                        "useEffect": [Function],
                        "useImperativeHandle": [Function],
                        "useLayoutEffect": [Function],
                        "useMemo": [Function],
                        "useReducer": [Function],
                        "useRef": [Function],
                        "useResponder": [Function],
                        "useState": [Function],
                        "useTransition": [Function],
                      },
                    },
                    "ReactCurrentOwner": Object {
                      "current": null,
                    },
                    "ReactDebugCurrentFrame": Object {
                      "getCurrentStack": null,
                      "getStackAddendum": [Function],
                    },
                    "assign": [Function],
                  },
                  "cloneElement": [Function],
                  "createContext": [Function],
                  "createElement": [Function],
                  "createFactory": [Function],
                  "createRef": [Function],
                  "forwardRef": [Function],
                  "isValidElement": [Function],
                  "lazy": [Function],
                  "memo": [Function],
                  "useCallback": [Function],
                  "useContext": [Function],
                  "useDebugValue": [Function],
                  "useEffect": [Function],
                  "useImperativeHandle": [Function],
                  "useLayoutEffect": [Function],
                  "useMemo": [Function],
                  "useReducer": [Function],
                  "useRef": [Function],
                  "useState": [Function],
                  "version": "16.12.0",
                }
              }
              auth={[Function]}
              authActions={
                Object {
                  "authorize": [Function],
                  "authorizeAccessCodeWithBasicAuthentication": [Function],
                  "authorizeAccessCodeWithFormParams": [Function],
                  "authorizeApplication": [Function],
                  "authorizeOauth2": [Function],
                  "authorizePassword": [Function],
                  "authorizeRequest": [Function],
                  "configureAuth": [Function],
                  "logout": [Function],
                  "preAuthorizeImplicit": [Function],
                  "showDefinitions": [Function],
                }
              }
              authSelectors={
                Object {
                  "authorized": [Function],
                  "definitionsForRequirements": [Function],
                  "definitionsToAuthorize": [Function],
                  "getConfigs": [Function],
                  "getDefinitionsByNames": [Function],
                  "isAuthorized": [Function],
                  "shownDefinitions": [Function],
                }
              }
              configs={Object {}}
              configsActions={
                Object {
                  "loaded": [Function],
                  "toggle": [Function],
                  "update": [Function],
                }
              }
              configsSelectors={
                Object {
                  "get": [Function],
                }
              }
              dispatch={[Function]}
              err={[Function]}
              errActions={
                Object {
                  "clear": [Function],
                  "clearBy": [Function],
                  "newAuthErr": [Function],
                  "newSpecErr": [Function],
                  "newSpecErrBatch": [Function],
                  "newThrownErr": [Function],
                  "newThrownErrBatch": [Function],
                }
              }
              errSelectors={
                Object {
                  "allErrors": [Function],
                  "lastError": [Function],
                }
              }
              fn={
                Object {
                  "buildRequest": [Function],
                  "createXMLExample": [Function],
                  "execute": [Function],
                  "fetch": [Function],
                  "getScrollParent": [Function],
                  "inferSchema": [Function],
                  "memoizedCreateXMLExample": [Function],
                  "memoizedSampleFromSchema": [Function],
                  "opId": [Function],
                  "opsFilter": [Function],
                  "resolve": [Function],
                  "resolveSubtree": [Function],
                  "sampleFromSchema": [Function],
                  "sampleXmlFromSchema": [Function],
                  "serializeRes": [Function],
                  "shallowEqualKeys": [Function],
                }
              }
              getComponent={[Function]}
              getComponents={[Function]}
              getConfigs={[Function]}
              getState={[Function]}
              getStore={[Function]}
              getSystem={[Function]}
              initOAuth={[Function]}
              layout={[Function]}
              layoutActions={
                Object {
                  "changeMode": [Function],
                  "clearScrollTo": [Function],
                  "parseDeepLinkHash": [Function],
                  "readyToScroll": [Function],
                  "scrollTo": [Function],
                  "scrollToElement": [Function],
                  "show": [Function],
                  "updateFilter": [Function],
                  "updateLayout": [Function],
                }
              }
              layoutSelectors={
                Object {
                  "current": [Function],
                  "currentFilter": [Function],
                  "getScrollToKey": [Function],
                  "isShown": [Function],
                  "isShownKeyFromUrlHashArray": [Function],
                  "showSummary": [Function],
                  "urlHashArrayFromIsShownKey": [Function],
                  "whatMode": [Function],
                }
              }
              log={[Function]}
              makeMappedContainer={[Function]}
              oas3={[Function]}
              oas3Actions={
                Object {
                  "setActiveExamplesMember": [Function],
                  "setRequestBodyValue": [Function],
                  "setRequestContentType": [Function],
                  "setResponseContentType": [Function],
                  "setSelectedServer": [Function],
                  "setServerVariableValue": [Function],
                }
              }
              oas3Selectors={
                Object {
                  "activeExamplesMember": [Function],
                  "requestBodyValue": [Function],
                  "requestContentType": [Function],
                  "responseContentType": [Function],
                  "selectedServer": [Function],
                  "serverEffectiveValue": [Function],
                  "serverVariableValue": [Function],
                  "serverVariables": [Function],
                }
              }
              preauthorizeApiKey={[Function]}
              preauthorizeBasic={[Function]}
              render={[Function]}
              spec={[Function]}
              specActions={
                Object {
                  "changeConsumesValue": [Function],
                  "changeParam": [Function],
                  "changeParamByIdentity": [Function],
                  "changeProducesValue": [Function],
                  "clearRequest": [Function],
                  "clearResponse": [Function],
                  "clearValidateParams": [Function],
                  "download": [Function],
                  "downloadConfig": [Function],
                  "execute": [Function],
                  "executeRequest": [Function],
                  "getConfigByUrl": [Function],
                  "invalidateResolvedSubtreeCache": [Function],
                  "logRequest": [Function],
                  "parseToJson": [Function],
                  "requestResolvedSubtree": [Function],
                  "resolveSpec": [Function],
                  "setMutatedRequest": [Function],
                  "setRequest": [Function],
                  "setResponse": [Function],
                  "setScheme": [Function],
                  "updateEmptyParamInclusion": [Function],
                  "updateJsonSpec": [Function],
                  "updateLoadingStatus": [Function],
                  "updateResolved": [Function],
                  "updateResolvedSubtree": [Function],
                  "updateSpec": [Function],
                  "updateUrl": [Function],
                  "validateParams": [Function],
                }
              }
              specSelectors={
                Object {
                  "allowTryItOutFor": [Function],
                  "basePath": [Function],
                  "canExecuteScheme": [Function],
                  "consumes": [Function],
                  "consumesOptionsFor": [Function],
                  "contentTypeValues": [Function],
                  "currentProducesFor": [Function],
                  "definitions": [Function],
                  "externalDocs": [Function],
                  "findDefinition": [Function],
                  "getLocalConfig": [Function],
                  "getParameter": [Function],
                  "hasHost": [Function],
                  "host": [Function],
                  "info": [Function],
                  "isOAS3": [Function],
                  "isSwagger2": [Function],
                  "lastError": [Function],
                  "loadingStatus": [Function],
                  "mutatedRequestFor": [Function],
                  "mutatedRequests": [Function],
                  "operationScheme": [Function],
                  "operationWithMeta": [Function],
                  "operations": [Function],
                  "operationsWithRootInherited": [Function],
                  "operationsWithTags": [Function],
                  "parameterInclusionSettingFor": [Function],
                  "parameterValues": [Function],
                  "parameterWithMeta": [Function],
                  "parameterWithMetaByIdentity": [Function],
                  "parametersIncludeIn": [Function],
                  "parametersIncludeType": [Function],
                  "paths": [Function],
                  "produces": [Function],
                  "producesOptionsFor": [Function],
                  "requestFor": [Function],
                  "requests": [Function],
                  "responseFor": [Function],
                  "responses": [Function],
                  "schemes": [Function],
                  "security": [Function],
                  "securityDefinitions": [Function],
                  "semver": [Function],
                  "servers": [Function],
                  "spec": [Function],
                  "specJson": [Function],
                  "specJsonWithResolvedSubtrees": [Function],
                  "specResolved": [Function],
                  "specResolvedSubtree": [Function],
                  "specSource": [Function],
                  "specStr": [Function],
                  "tagDetails": [Function],
                  "taggedOperations": [Function],
                  "tags": [Function],
                  "url": [Function],
                  "validateBeforeExecute": [Function],
                  "version": [Function],
                }
              }
              state={
                Immutable.Map {
                  "layout": Immutable.Map {
                    "layout": "BaseLayout",
                    "filter": null,
                  },
                  "spec": Immutable.Map {
                    "spec": "",
                    "url": "foo.example.com",
                    "loadingStatus": "loading",
                  },
                  "configs": Immutable.Map {},
                  "err": Immutable.Map {},
                  "auth": Immutable.Map {},
                  "oas3": Immutable.Map {},
                }
              }
            >
              <Connect(r)>
                <r
                  dispatch={[Function]}
                  state={
                    Immutable.Map {
                      "layout": Immutable.Map {
                        "layout": "BaseLayout",
                        "filter": null,
                      },
                      "spec": Immutable.Map {
                        "spec": "",
                        "url": "foo.example.com",
                        "loadingStatus": "loading",
                      },
                      "configs": Immutable.Map {},
                      "err": Immutable.Map {},
                      "auth": Immutable.Map {},
                      "oas3": Immutable.Map {},
                    }
                  }
                >
                  <t
                    Im={
                      Object {
                        "Collection": [Function],
                        "Iterable": [Function],
                        "List": [Function],
                        "Map": [Function],
                        "OrderedMap": [Function],
                        "OrderedSet": [Function],
                        "Range": [Function],
                        "Record": [Function],
                        "Repeat": [Function],
                        "Seq": [Function],
                        "Set": [Function],
                        "Stack": [Function],
                        "fromJS": [Function],
                        "is": [Function],
                      }
                    }
                    React={
                      Object {
                        "Children": Object {
                          "count": [Function],
                          "forEach": [Function],
                          "map": [Function],
                          "only": [Function],
                          "toArray": [Function],
                        },
                        "Component": [Function],
                        "Fragment": Symbol(react.fragment),
                        "Profiler": Symbol(react.profiler),
                        "PureComponent": [Function],
                        "StrictMode": Symbol(react.strict_mode),
                        "Suspense": Symbol(react.suspense),
                        "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": Object {
                          "IsSomeRendererActing": Object {
                            "current": false,
                          },
                          "ReactComponentTreeHook": Object {},
                          "ReactCurrentBatchConfig": Object {
                            "suspense": null,
                          },
                          "ReactCurrentDispatcher": Object {
                            "current": Object {
                              "readContext": [Function],
                              "useCallback": [Function],
                              "useContext": [Function],
                              "useDebugValue": [Function],
                              "useDeferredValue": [Function],
                              "useEffect": [Function],
                              "useImperativeHandle": [Function],
                              "useLayoutEffect": [Function],
                              "useMemo": [Function],
                              "useReducer": [Function],
                              "useRef": [Function],
                              "useResponder": [Function],
                              "useState": [Function],
                              "useTransition": [Function],
                            },
                          },
                          "ReactCurrentOwner": Object {
                            "current": null,
                          },
                          "ReactDebugCurrentFrame": Object {
                            "getCurrentStack": null,
                            "getStackAddendum": [Function],
                          },
                          "assign": [Function],
                        },
                        "cloneElement": [Function],
                        "createContext": [Function],
                        "createElement": [Function],
                        "createFactory": [Function],
                        "createRef": [Function],
                        "forwardRef": [Function],
                        "isValidElement": [Function],
                        "lazy": [Function],
                        "memo": [Function],
                        "useCallback": [Function],
                        "useContext": [Function],
                        "useDebugValue": [Function],
                        "useEffect": [Function],
                        "useImperativeHandle": [Function],
                        "useLayoutEffect": [Function],
                        "useMemo": [Function],
                        "useReducer": [Function],
                        "useRef": [Function],
                        "useState": [Function],
                        "version": "16.12.0",
                      }
                    }
                    auth={[Function]}
                    authActions={
                      Object {
                        "authorize": [Function],
                        "authorizeAccessCodeWithBasicAuthentication": [Function],
                        "authorizeAccessCodeWithFormParams": [Function],
                        "authorizeApplication": [Function],
                        "authorizeOauth2": [Function],
                        "authorizePassword": [Function],
                        "authorizeRequest": [Function],
                        "configureAuth": [Function],
                        "logout": [Function],
                        "preAuthorizeImplicit": [Function],
                        "showDefinitions": [Function],
                      }
                    }
                    authSelectors={
                      Object {
                        "authorized": [Function],
                        "definitionsForRequirements": [Function],
                        "definitionsToAuthorize": [Function],
                        "getConfigs": [Function],
                        "getDefinitionsByNames": [Function],
                        "isAuthorized": [Function],
                        "shownDefinitions": [Function],
                      }
                    }
                    configs={Object {}}
                    configsActions={
                      Object {
                        "loaded": [Function],
                        "toggle": [Function],
                        "update": [Function],
                      }
                    }
                    configsSelectors={
                      Object {
                        "get": [Function],
                      }
                    }
                    dispatch={[Function]}
                    err={[Function]}
                    errActions={
                      Object {
                        "clear": [Function],
                        "clearBy": [Function],
                        "newAuthErr": [Function],
                        "newSpecErr": [Function],
                        "newSpecErrBatch": [Function],
                        "newThrownErr": [Function],
                        "newThrownErrBatch": [Function],
                      }
                    }
                    errSelectors={
                      Object {
                        "allErrors": [Function],
                        "lastError": [Function],
                      }
                    }
                    fn={
                      Object {
                        "buildRequest": [Function],
                        "createXMLExample": [Function],
                        "execute": [Function],
                        "fetch": [Function],
                        "getScrollParent": [Function],
                        "inferSchema": [Function],
                        "memoizedCreateXMLExample": [Function],
                        "memoizedSampleFromSchema": [Function],
                        "opId": [Function],
                        "opsFilter": [Function],
                        "resolve": [Function],
                        "resolveSubtree": [Function],
                        "sampleFromSchema": [Function],
                        "sampleXmlFromSchema": [Function],
                        "serializeRes": [Function],
                        "shallowEqualKeys": [Function],
                      }
                    }
                    getComponent={[Function]}
                    getComponents={[Function]}
                    getConfigs={[Function]}
                    getState={[Function]}
                    getStore={[Function]}
                    getSystem={[Function]}
                    initOAuth={[Function]}
                    layout={[Function]}
                    layoutActions={
                      Object {
                        "changeMode": [Function],
                        "clearScrollTo": [Function],
                        "parseDeepLinkHash": [Function],
                        "readyToScroll": [Function],
                        "scrollTo": [Function],
                        "scrollToElement": [Function],
                        "show": [Function],
                        "updateFilter": [Function],
                        "updateLayout": [Function],
                      }
                    }
                    layoutSelectors={
                      Object {
                        "current": [Function],
                        "currentFilter": [Function],
                        "getScrollToKey": [Function],
                        "isShown": [Function],
                        "isShownKeyFromUrlHashArray": [Function],
                        "showSummary": [Function],
                        "urlHashArrayFromIsShownKey": [Function],
                        "whatMode": [Function],
                      }
                    }
                    log={[Function]}
                    makeMappedContainer={[Function]}
                    oas3={[Function]}
                    oas3Actions={
                      Object {
                        "setActiveExamplesMember": [Function],
                        "setRequestBodyValue": [Function],
                        "setRequestContentType": [Function],
                        "setResponseContentType": [Function],
                        "setSelectedServer": [Function],
                        "setServerVariableValue": [Function],
                      }
                    }
                    oas3Selectors={
                      Object {
                        "activeExamplesMember": [Function],
                        "requestBodyValue": [Function],
                        "requestContentType": [Function],
                        "responseContentType": [Function],
                        "selectedServer": [Function],
                        "serverEffectiveValue": [Function],
                        "serverVariableValue": [Function],
                        "serverVariables": [Function],
                      }
                    }
                    preauthorizeApiKey={[Function]}
                    preauthorizeBasic={[Function]}
                    render={[Function]}
                    spec={[Function]}
                    specActions={
                      Object {
                        "changeConsumesValue": [Function],
                        "changeParam": [Function],
                        "changeParamByIdentity": [Function],
                        "changeProducesValue": [Function],
                        "clearRequest": [Function],
                        "clearResponse": [Function],
                        "clearValidateParams": [Function],
                        "download": [Function],
                        "downloadConfig": [Function],
                        "execute": [Function],
                        "executeRequest": [Function],
                        "getConfigByUrl": [Function],
                        "invalidateResolvedSubtreeCache": [Function],
                        "logRequest": [Function],
                        "parseToJson": [Function],
                        "requestResolvedSubtree": [Function],
                        "resolveSpec": [Function],
                        "setMutatedRequest": [Function],
                        "setRequest": [Function],
                        "setResponse": [Function],
                        "setScheme": [Function],
                        "updateEmptyParamInclusion": [Function],
                        "updateJsonSpec": [Function],
                        "updateLoadingStatus": [Function],
                        "updateResolved": [Function],
                        "updateResolvedSubtree": [Function],
                        "updateSpec": [Function],
                        "updateUrl": [Function],
                        "validateParams": [Function],
                      }
                    }
                    specSelectors={
                      Object {
                        "allowTryItOutFor": [Function],
                        "basePath": [Function],
                        "canExecuteScheme": [Function],
                        "consumes": [Function],
                        "consumesOptionsFor": [Function],
                        "contentTypeValues": [Function],
                        "currentProducesFor": [Function],
                        "definitions": [Function],
                        "externalDocs": [Function],
                        "findDefinition": [Function],
                        "getLocalConfig": [Function],
                        "getParameter": [Function],
                        "hasHost": [Function],
                        "host": [Function],
                        "info": [Function],
                        "isOAS3": [Function],
                        "isSwagger2": [Function],
                        "lastError": [Function],
                        "loadingStatus": [Function],
                        "mutatedRequestFor": [Function],
                        "mutatedRequests": [Function],
                        "operationScheme": [Function],
                        "operationWithMeta": [Function],
                        "operations": [Function],
                        "operationsWithRootInherited": [Function],
                        "operationsWithTags": [Function],
                        "parameterInclusionSettingFor": [Function],
                        "parameterValues": [Function],
                        "parameterWithMeta": [Function],
                        "parameterWithMetaByIdentity": [Function],
                        "parametersIncludeIn": [Function],
                        "parametersIncludeType": [Function],
                        "paths": [Function],
                        "produces": [Function],
                        "producesOptionsFor": [Function],
                        "requestFor": [Function],
                        "requests": [Function],
                        "responseFor": [Function],
                        "responses": [Function],
                        "schemes": [Function],
                        "security": [Function],
                        "securityDefinitions": [Function],
                        "semver": [Function],
                        "servers": [Function],
                        "spec": [Function],
                        "specJson": [Function],
                        "specJsonWithResolvedSubtrees": [Function],
                        "specResolved": [Function],
                        "specResolvedSubtree": [Function],
                        "specSource": [Function],
                        "specStr": [Function],
                        "tagDetails": [Function],
                        "taggedOperations": [Function],
                        "tags": [Function],
                        "url": [Function],
                        "validateBeforeExecute": [Function],
                        "version": [Function],
                      }
                    }
                    state={
                      Immutable.Map {
                        "layout": Immutable.Map {
                          "layout": "BaseLayout",
                          "filter": null,
                        },
                        "spec": Immutable.Map {
                          "spec": "",
                          "url": "foo.example.com",
                          "loadingStatus": "loading",
                        },
                        "configs": Immutable.Map {},
                        "err": Immutable.Map {},
                        "auth": Immutable.Map {},
                        "oas3": Immutable.Map {},
                      }
                    }
                  >
                    <div
                      className="swagger-ui"
                    >
                      <div
                        className="loading-container"
                      >
                        <div
                          className="info"
                        >
                          <div
                            className="loading-container"
                          >
                            <div
                              className="loading"
                            />
                          </div>
                        </div>
                      </div>
                    </div>
                  </t>
                </r>
              </Connect(r)>
            </t>
          </r>
        </Connect(r)>
      </Provider>
    </r>
  </SwaggerUI>
</ActiveDocsSpec>
`;
