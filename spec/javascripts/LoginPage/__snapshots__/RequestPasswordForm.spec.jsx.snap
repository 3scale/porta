// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should render flashMessages when present 1`] = `
<RequestPasswordForm
  flashMessages={
    Array [
      Object {
        "message": "Ooops",
        "type": "error",
      },
    ]
  }
  providerLoginPath="login-path"
  providerPasswordPath="password-path"
>
  <Form
    acceptCharset="UTF-8"
    action="password-path"
    id="request_password"
    method="post"
    noValidate={true}
  >
    <form
      acceptCharset="UTF-8"
      action="password-path"
      className="pf-c-form"
      id="request_password"
      method="post"
      noValidate={true}
    >
      <HiddenInputs
        isPasswordReset={true}
      >
        <input
          name="utf8"
          type="hidden"
          value="✓"
        />
        <input
          name="_method"
          type="hidden"
          value="delete"
        />
        <CSRFToken>
          <input
            type="hidden"
          />
        </CSRFToken>
      </HiddenInputs>
      <EmailField
        inputProps={
          Object {
            "autoFocus": "autoFocus",
            "fieldId": "email",
            "isRequired": true,
            "isValid": undefined,
            "label": "Email address",
            "name": "email",
            "onChange": [Function],
            "value": "",
          }
        }
      >
        <FormGroup
          helperTextInvalid="A valid email address is mandatory"
          inputProps={
            Object {
              "autoFocus": "autoFocus",
              "fieldId": "email",
              "isRequired": true,
              "isValid": undefined,
              "label": "Email address",
              "name": "email",
              "onChange": [Function],
              "value": "",
            }
          }
          type="email"
        >
          <FormGroup
            fieldId="email"
            helperTextInvalid="A valid email address is mandatory"
            isRequired={true}
            label="Email address"
          >
            <div
              className="pf-c-form__group"
            >
              <label
                className="pf-c-form__label"
                htmlFor="email"
              >
                <span
                  className="pf-c-form__label-text"
                >
                  Email address
                </span>
                <span
                  aria-hidden="true"
                  className="pf-c-form__label-required"
                >
                  *
                </span>
              </label>
              <ForwardRef
                autoFocus="autoFocus"
                id="email"
                isRequired={true}
                name="email"
                onChange={[Function]}
                type="email"
                value=""
              >
                <TextInputBase
                  aria-label={null}
                  autoFocus="autoFocus"
                  className=""
                  id="email"
                  innerRef={null}
                  isDisabled={false}
                  isReadOnly={false}
                  isRequired={true}
                  isValid={true}
                  name="email"
                  onChange={[Function]}
                  type="email"
                  validated="default"
                  value=""
                >
                  <input
                    aria-invalid={false}
                    aria-label={null}
                    autoFocus="autoFocus"
                    className="pf-c-form-control"
                    disabled={false}
                    id="email"
                    name="email"
                    onChange={[Function]}
                    readOnly={false}
                    required={true}
                    type="email"
                    value=""
                  />
                </TextInputBase>
              </ForwardRef>
            </div>
          </FormGroup>
        </FormGroup>
      </EmailField>
      <ActionGroup>
        <div
          className="pf-c-form__group pf-m-action"
        >
          <div
            className="pf-c-form__actions"
          >
            <Component
              className="pf-c-button pf-m-primary pf-m-block"
              isDisabled={true}
              type="submit"
            >
              <ComponentWithOuia
                component={[Function]}
                componentProps={
                  Object {
                    "children": "Reset password",
                    "className": "pf-c-button pf-m-primary pf-m-block",
                    "isDisabled": true,
                    "type": "submit",
                  }
                }
                consumerContext={null}
              >
                <Button
                  className="pf-c-button pf-m-primary pf-m-block"
                  isDisabled={true}
                  ouiaContext={
                    Object {
                      "isOuia": false,
                      "ouiaId": null,
                    }
                  }
                  type="submit"
                >
                  <button
                    aria-disabled={null}
                    aria-label={null}
                    className="pf-c-button pf-m-primary pf-c-button pf-m-primary pf-m-block"
                    disabled={true}
                    tabIndex={null}
                    type="submit"
                  >
                    Reset password
                  </button>
                </Button>
              </ComponentWithOuia>
            </Component>
            <a
              href="login-path"
            >
              Sign in
            </a>
          </div>
        </div>
      </ActionGroup>
    </form>
  </Form>
</RequestPasswordForm>
`;

exports[`should render itself 1`] = `
<RequestPasswordForm
  flashMessages={Array []}
  providerLoginPath="login-path"
  providerPasswordPath="password-path"
>
  <Form
    acceptCharset="UTF-8"
    action="password-path"
    id="request_password"
    method="post"
    noValidate={true}
  >
    <form
      acceptCharset="UTF-8"
      action="password-path"
      className="pf-c-form"
      id="request_password"
      method="post"
      noValidate={true}
    >
      <HiddenInputs
        isPasswordReset={true}
      >
        <input
          name="utf8"
          type="hidden"
          value="✓"
        />
        <input
          name="_method"
          type="hidden"
          value="delete"
        />
        <CSRFToken>
          <input
            type="hidden"
          />
        </CSRFToken>
      </HiddenInputs>
      <EmailField
        inputProps={
          Object {
            "autoFocus": "autoFocus",
            "fieldId": "email",
            "isRequired": true,
            "isValid": undefined,
            "label": "Email address",
            "name": "email",
            "onChange": [Function],
            "value": "",
          }
        }
      >
        <FormGroup
          helperTextInvalid="A valid email address is mandatory"
          inputProps={
            Object {
              "autoFocus": "autoFocus",
              "fieldId": "email",
              "isRequired": true,
              "isValid": undefined,
              "label": "Email address",
              "name": "email",
              "onChange": [Function],
              "value": "",
            }
          }
          type="email"
        >
          <FormGroup
            fieldId="email"
            helperTextInvalid="A valid email address is mandatory"
            isRequired={true}
            label="Email address"
          >
            <div
              className="pf-c-form__group"
            >
              <label
                className="pf-c-form__label"
                htmlFor="email"
              >
                <span
                  className="pf-c-form__label-text"
                >
                  Email address
                </span>
                <span
                  aria-hidden="true"
                  className="pf-c-form__label-required"
                >
                  *
                </span>
              </label>
              <ForwardRef
                autoFocus="autoFocus"
                id="email"
                isRequired={true}
                name="email"
                onChange={[Function]}
                type="email"
                value=""
              >
                <TextInputBase
                  aria-label={null}
                  autoFocus="autoFocus"
                  className=""
                  id="email"
                  innerRef={null}
                  isDisabled={false}
                  isReadOnly={false}
                  isRequired={true}
                  isValid={true}
                  name="email"
                  onChange={[Function]}
                  type="email"
                  validated="default"
                  value=""
                >
                  <input
                    aria-invalid={false}
                    aria-label={null}
                    autoFocus="autoFocus"
                    className="pf-c-form-control"
                    disabled={false}
                    id="email"
                    name="email"
                    onChange={[Function]}
                    readOnly={false}
                    required={true}
                    type="email"
                    value=""
                  />
                </TextInputBase>
              </ForwardRef>
            </div>
          </FormGroup>
        </FormGroup>
      </EmailField>
      <ActionGroup>
        <div
          className="pf-c-form__group pf-m-action"
        >
          <div
            className="pf-c-form__actions"
          >
            <Component
              className="pf-c-button pf-m-primary pf-m-block"
              isDisabled={true}
              type="submit"
            >
              <ComponentWithOuia
                component={[Function]}
                componentProps={
                  Object {
                    "children": "Reset password",
                    "className": "pf-c-button pf-m-primary pf-m-block",
                    "isDisabled": true,
                    "type": "submit",
                  }
                }
                consumerContext={null}
              >
                <Button
                  className="pf-c-button pf-m-primary pf-m-block"
                  isDisabled={true}
                  ouiaContext={
                    Object {
                      "isOuia": false,
                      "ouiaId": null,
                    }
                  }
                  type="submit"
                >
                  <button
                    aria-disabled={null}
                    aria-label={null}
                    className="pf-c-button pf-m-primary pf-c-button pf-m-primary pf-m-block"
                    disabled={true}
                    tabIndex={null}
                    type="submit"
                  >
                    Reset password
                  </button>
                </Button>
              </ComponentWithOuia>
            </Component>
            <a
              href="login-path"
            >
              Sign in
            </a>
          </div>
        </div>
      </ActionGroup>
    </form>
  </Form>
</RequestPasswordForm>
`;
