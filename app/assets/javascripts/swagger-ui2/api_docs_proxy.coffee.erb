# Route all requests not having same origin to api docs proxy
class ApiDocsProxy

  NO_CACHE_HEADERS = { "Cache-Control": "no-cache"  }

  execute: (httpClient, obj) ->
    unless @enableApiDocsProxy()
      if @originHttps() then obj.url = @forceHttpsProtocol obj.url

    @createLinkElement obj.url
    obj.originalUrl = obj.url
    # console.log "[ApiDocsProxy] incoming url #{obj.url}"
    if not @sameOrigin()
      if _.isUndefined obj.method
        obj.method = obj.type || "POST" # fallback to POST

      obj.url = @locationOrigin() + '/api_docs/proxy'
      obj.url += '?_=' + (new Date).getTime() # cache buster

      # console.log "[ApiDocsProxy] proxying #{obj.originalUrl}"
      $.extend obj.headers, NO_CACHE_HEADERS, @apiDocsHeaders(obj)
    result = httpClient.execute(obj)
    if not @sameOrigin()
      obj.url = obj.originalUrl
    result

  apiDocsHeaders: (obj) -> {
    'X-Apidocs-Method': obj.method,
    'X-Apidocs-Path'  : @linkElement.pathname,
    'X-Apidocs-Url'   : @desiredOrigin(),
    'X-Apidocs-Query' : @linkElement.search.replace("?", "")
  }

  originHttps: ->
    window.top.location.protocol == 'https:'

  forceHttpsProtocol: (url) ->
    url.replace(/^http:\/\//i, 'https://')

  locationOrigin: ->
    window.top.location.origin

  createLinkElement: (url) ->
    @linkElement = window.document.createElement "a"
    @linkElement.href = url
    @linkElement

  sameOrigin: ->
    !@enableApiDocsProxy() || @desiredOrigin() == @locationOrigin()


  enableApiDocsProxy: ->
    window.enableApiDocsProxy

  desiredOrigin: ->
    portPart = if @linkElement.port is "" then "" else ":" + @linkElement.port
    @linkElement.protocol + "//" + @linkElement.hostname + portPart

window.ApiDocsProxy = new ApiDocsProxy()
