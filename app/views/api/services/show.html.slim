- content_for :javascripts do
  = javascript_pack_tag 'services'

h1 Overview

section.Section
  .SettingsBox
    = pf_link_to 'edit', edit_admin_service_path(@service), class: "SettingsBox-toggle"
    dl.SettingsBox-summary.u-dl data-state="open"
      dt.u-dl-term Name
      dd.u-dl-definition = @service.name
      dt.u-dl-term System Name
      dd.u-dl-definition = @service.system_name
      - if @service.description.present?
        dt.u-dl-term Description
        dd.u-dl-definition = @service.description
      - if service_discovery_accessible? && @service.discovered?
        dt.u-dl-term Source
        dd.u-dl-definition
          'OpenShift
          = refresh_service_link(@service, label: 'refresh')

- service =  @service

section class="service-widget"
  div.content-service
    section[name="settings"]

      - if can? :manage, :partners

        - if can?(:show, Cinstance)
          h2 = link_to 'Latest Apps', admin_service_applications_path(service), :title => 'Show all applications for this service'
          ol.latest-apps
            = list_items_or_empty service.latest_applications, 'There are no latest applications.' do |cinstance|
              - if cinstance.user_account.present?
                li.item
                  => link_to cinstance.name, admin_service_application_path(cinstance.service, cinstance)
                  '  from
                  = link_to cinstance.user_account.org_name, admin_buyers_account_path(cinstance.user_account)


        h2 = link_to 'Latest alerts', admin_service_alerts_path(service), :title => 'Show all limit alerts for this service'
        ol.latest-alerts
          = list_items_or_empty current_account.alerts.by_service(service).latest, 'There are no alerts.' do |alert|
            li.item
              = link_to_cinstance_or_deleted(alert.cinstance)
              |  at
              = l alert.timestamp
              |  (
              = colorize_utilization(alert.level)
              | )
              br
              span.name
                = alert.message

      - if can? :manage, :plans
        .flex-row
          h2.flex-item
            '  Published
            => link_to 'Application Plans', admin_service_application_plans_path(service)
          = pf_action_link_to :new, new_admin_service_application_plan_path(service),
            label: 'Create Application Plan', class: 'flex-item'

        ul.application-plans[data-hint="published"]
          = list_items_or_empty service.published_application_plans, 'There are no published application plans. Create one!' do |plan|
            li.plan.item
              => plan.link_to_edit(class: :name)
              ' -
              = plan.link_to_applications
        p
          '  You have
          = service.link_to_application_plans
          '  with a total of
          = service.link_to_live_applications
          | .

        - if (can? :manage, :service_plans) && (current_account.settings.service_plans_ui_visible?)
          .flex-row
            h2.flex-item
              '  Published
              => link_to 'Service plans', admin_service_service_plans_path(service)
            = pf_action_link_to :new,  new_admin_service_service_plan_path(service),
              label: 'Create Service Plan', class: 'flex-item'

          ul.service-plans[data-hint="published"]
            = list_items_or_empty service.service_plans.published, 'There are no published service plans. Create one!' do |plan|
              li.plan.item
                => link_to plan.name, edit_admin_service_plan_path(plan), :class => :name
                ' -
                = pluralize plan.contracts.size, 'contract'
          p
            '  You have
            = link_to pluralize(service.service_plans.size, 'service plan'),admin_service_service_plans_path(service)
            |  (
            = service.service_plans.published.size
            '  published) with a total of
            = pluralize service.contracts.service.size, 'contract'
            | .

    - if current_user.accessible_services.empty?
      = render 'shared/service_access'

    section[name="activity"]

      - if can? :manage, :monitoring
        h2 = link_to 'Analytics', admin_service_stats_usage_path(service), :title => 'Show more stats for this service'
        = render 'stats/inlinechart',
                 :metrics => service.metrics.top_level

      - if can? :manage, :partners
        h2
          = link_to 'Configuration', admin_service_integration_path(service), title: 'Change integration settings for this service'
          ' ,
          => link_to 'Methods', admin_service_metrics_path(service)
          '  and
          =< link_to 'Settings', settings_admin_service_path(service), :title => "Edit service settings"

        ul.service-settings[data-hint="basics"]
          - if service.deployment_option.present?
            - deployment_option_phrased = t(service.proxy.deployment_option, scope: "deployment_options.phrased")
          - unless service.has_traffic?
            / TODO: THREESCALE-3759 verify if this is always hidden, and remove if required
            li class=("item integration is-hidden")
              - case service.proxy.deployment_option.presence
              - when 'hosted'
                / TODO: THREESCALE-3759 remove associated code
                  p On the #{link_to( 'Integration page', edit_admin_service_integration_path(service, :anchor => 'staging') )}, add your <em>API base URL</em> to the <em>Private Base URL</em> field in the staging box and hit <strong>Update & Test</strong>. Once the staging box is green, hit <strong>Deploy</strong> in the production box and you have completed a basic integration.
                  = important_icon_link "Configure #{deployment_option_phrased}",
                    'hdd-o', edit_admin_service_integration_path(service, :anchor => 'staging'), :class => "outline-button next"
              - when 'self_managed'
                / TODO: THREESCALE-3759 remove associated code
                  p On the #{link_to( 'Integration page', edit_admin_service_integration_path(service, :anchor => 'staging') )}, add your <em>API base URL</em> to the <em>Private Base URL</em> field in the staging box and hit <strong>Update & Test</strong>. Once the staging box is green, proceed to download the NGINX config files for your On-premises NGINX reverse proxy server. Once you've added these config files to your Nginx server you have completed a basic integration.
                  = important_icon_link "Configure #{deployment_option_phrased}",
                    'hdd-o', edit_admin_service_integration_path(service, :anchor => 'staging'), :class => "outline-button next"
              - when 'plugin_rest'
                p Follow the instructions on the #{link_to('Integration page', admin_service_integration_path(service))} to integrate your API using #{deployment_option_phrased} the against 3scale Service Management API endpoints.
                = important_icon_link "Get started with #{deployment_option_phrased}",
                  'hdd-o', admin_service_integration_path(service), class: "outline-button next"
              - when nil
                p = t("deployment_options.missing")
                = important_icon_link 'Pick a deployment option now',
                  'hdd-o', admin_service_integration_path(service), class: "outline-button next"
              - else
                p Follow the instructions on the #{link_to( 'Integration page', admin_service_integration_path(service) )} to download and install the #{deployment_option_phrased} into your codebase.
                = important_icon_link "Get started with the #{deployment_option_phrased}",
                  'hdd-o',admin_service_integration_path(service), class: "outline-button next"

          - if service.deployment_option.present? && service.has_traffic?
            li.item
              ' Integrated through
              strong => deployment_option_phrased

          li.item
            ' Authenticated by
            strong
              => human_backend service.proxy_authentication_method
          li.item
            ' ID for API calls is
            strong
              => service.id
            ' and system name is
            strong
              = service.system_name

          - [:buyers_manage_keys, :buyers_manage_apps, :buyer_plan_change_permission, :buyer_can_select_plan ].map { |setting| friendly_service_setting(service, setting) }.compact.each do |setting|
            li.item
              = setting
          li.item
            strong> Backends
            ' used in this product:
            ul
              - service.backend_apis.each do |backend_api|
                li = link_to backend_api.name, provider_admin_backend_api_path(backend_api)

javascript:
  document.addEventListener('DOMContentLoaded', function () {
    serviceInitialize()
  })
