- account = local_assigns[:account]
table.list
  tr
    th = account.field_label("org_name")
    td
      = account.field_value("org_name")
      - if can? :impersonate, account
        => link_to 'Impersonate',
                  admin_buyers_account_impersonation_path(account),
                  class: 'action bolt', method: 'post', target: '_blank'
      => link_to 'Send message',
                new_provider_admin_messages_outbox_path(to: account),
                class: 'action message fancybox'
  - if current_account.master? && account.provider?
    tr
      th Public domain
      td = link_to account.external_domain, public_domain(account), target: "_blank"
    tr
      th Admin domain
      td = link_to account.external_admin_domain,
                  provider_admin_dashboard_url(host: account.external_admin_domain),
                  target: "_blank"
  - if account.admins.present?
    tr
      th Administrator
      td
        => account.admin_user_display_name
        - admin_user_email = account.admin_user.email
        - if admin_user_email.present?
          | (#{mail_to admin_user_email})
  tr
    th Signed up on
    td = account.created_at.to_s(:long)
  = fields_definitions_rows account,
                            %w{org_name org_legaladdress org_legaladdress_cont city state_region}
  - unless account.org_legaladdress.blank? \
          && account.org_legaladdress_cont.blank? \
          && account.city.blank? && account.state_region.blank? \
          && account.country.try(:name).blank?
    tr
      th Address
      td = account_address(account)
  tr
    th Status
    td
      => account_states_info(account)
      - if account.pending?
        => fancy_button_to 'Approve',
                          approve_admin_buyers_account_path(account),
                          method: :post,
                          class: 'approve action'
        => fancy_button_to 'Reject',
                          reject_admin_buyers_account_path(account),
                          method: :post,
                          class: 'reject action'
      - unless account.suspended_or_scheduled_for_deletion?
        = action_link_to 'Suspend',
                          suspend_admin_buyers_account_path(account),
                          method: :post,
                          data: { confirm: 'Are you sure?', disable_with: 'suspending…' },
                          class: 'action suspend'
      - if can?(:resume, account) && account.can_resume?
        = action_link_to 'Resume',
                        resume_admin_buyers_account_path(account),
                        method: :post,
                        data: { confirm: 'Are you sure?', disable_with: 'resuming…' },
                        class: 'action resume'
