<% content_for :sublayout_title, 'ActiveDocs' %>
<%= render "menu" -%>

<div class="swagger-section">
  <div id="message-bar" class="swagger-ui-wrap">&nbsp;</div>
  <div id="swagger-ui-container" class="swagger-ui-wrap"></div>
</div>

<div class='apidocs-param-tips apidocs-signin-message' style='display:none;'>
  <p><a href='#'>Sign in</a> to your account for quick access to useful values.</p>
</div>

<%# TODO: this is here until we get swagger-ui 2.1 to load swagger spec 1.2 and 2.0 %>
<% if @api_docs_service.specification.swagger_2_0? -%>

  <% content_for :javascripts do -%>
    <%= javascript_include_tag "/_cdn_assets_/swagger-ui/2.2.10/swagger-ui.js" -%>
    <%= javascript_include_tag "swagger-ui2/api_docs_proxy" %>

    <%= stylesheet_link_tag    "/_cdn_assets_/swagger-ui/2.2.10/swagger-ui.css" %>

    <style type="text/css">
      div.swagger-section {
        font-size:110%;
      }
      div.swagger-section pre, div.swagger-section code {
        font-size: 1em;
      }
    </style>
  <% end -%>

  <script type="text/javascript">

    function log() {
      if ('console' in window) {
        console.log.apply(console, arguments);
      }
    }

    var AUTH_METHOD_USER_KEY = 1;
    var AUTH_METHOD_ID_KEY_PAIR = 2;

    function getAuthParamsForMethod(authMethod) {
      switch(authMethod) {
        case AUTH_METHOD_ID_KEY_PAIR:
          authParams = [{
            name: '<%= @api_docs_service.service.proxy.auth_app_key %>',
            in: 'header',
            description: 'App Key authentication parameter',
            'x-data-threescale-name': 'app_keys',
            required: true,
            type: 'string'
          },{
            name: '<%= @api_docs_service.service.proxy.auth_app_id %>',
            in: 'header',
            description: 'App ID authentication parameter',
            'x-data-threescale-name': 'app_ids',
            required: true,
            type: 'string'
          }];
          break;

        case AUTH_METHOD_USER_KEY:
          authParams = [{
            name: '<%= @api_docs_service.service.proxy.auth_user_key %>',
            in: 'header',
            description: 'User Key authentication parameter',
            'x-data-threescale-name': 'user_keys',
            required: true,
            type: 'string'
          }];
          break;

        default:
          authParams = [];
        return;
      }
    }

    function injectAuthParams(spec) {
      var authMethod = <%= @api_docs_service.service.proxy.authentication_method %>;
      var authParams = getAuthParamsForMethod(authMethod);

      for (var p in spec.paths) {
        var path = spec.paths[p];
        for (var verb in path) {
          authParams.forEach(function(param) {
            if (!path[verb].parameters.find(p => p.name === param.name)) {
              path[verb].parameters.push(param);
            }
          });
        }
      }
    }

    $(function () {
      var host = "<%= ApiDocsServicePresenter.new(@api_docs_service).host_with_port %>";
      var spec = <%= ActionController::Base.helpers.sanitize(@api_docs_service.body) %>;

      injectAuthParams(spec);

      window.swaggerUi = new SwaggerUi({
        spec: spec,
        validatorUrl: null,
        dom_id: "swagger-ui-container",
        supportedSubmitMethods: ['get', 'post', 'put', 'delete', 'patch'],
        onComplete: function(swaggerApi, swaggerUi) {
          $('#swagger-ui-container pre code').each(function(i, e) {
            hljs.highlightBlock(e)
          });
          if (host) {
            swaggerApi.setHost(host);
          }
        },
        onFailure: function(data) {
          log("Unable to Load SwaggerUI.");
        },
        docExpansion: "list",
        transport: function(httpClient, obj) {
          log("[swagger-ui]>>> custom transport.")
          <% if Rails.configuration.three_scale.active_docs_proxy_disabled -%>
            return httpClient.execute(obj)
          <% else -%>
            return ApiDocsProxy.execute(httpClient, obj)
          <% end %>
        }
      });

      window.swaggerUi.load('provider');

    });
  </script>

<% else -%>

  <% content_for :javascripts do -%>
    <%= javascript_include_tag "swagger-ui" -%>
    <%= javascript_include_tag "swagger-ui/threescale" -%>
    <%= javascript_include_tag "swagger-ui/extensions" -%>
    <%= stylesheet_link_tag    "swagger-ui/screen.css" -%>
    <%= stylesheet_link_tag    "swagger-ui/threescale" -%>

    <style type="text/css">
      div.swagger-section {
        font-size:110%;
      }
    </style>
  <% end -%>

  <%# don't do this at home. %>
  <script id="swagger-notifications" type="text/x-handlebars-template">
    <div class="swagger-notifications">
      <h3>Notifications</h3>
      <ul>
        {{#each __notifications}}
          <li>{{this}}</li>
        {{/each}}
      </ul>
    </div>
  </script>

  <script type="text/javascript">
    $(function () {
      var host = "<%= ApiDocsServicePresenter.new(@api_docs_service).host_with_port %>";
      var spec = <%= ActionController::Base.helpers.sanitize(@api_docs_service.body) %>;

      injectAuthParams(spec);

      window.swaggerUi = new SwaggerUi({
        spec: spec,
        dom_id: "swagger-ui-container",
        supportedSubmitMethods: ['get', 'post', 'put', 'delete', 'patch'],
        onComplete: function(swaggerApi, swaggerUi) {
          var source   = $("#swagger-notifications").html();
          var template = Handlebars.compile(source);
          var html = _.reduce( swaggerApi.apis, function(memo, api) { return memo + template(api); }, "" );
          $("#message-bar").append(html);
          if (host) {
            swaggerApi.setHost(host);
          }
        },
        onFailure: function(data) {
          log("Unable to Load SwaggerUI");
        },
        docExpansion: "list"
      });
      window.swaggerUi.load("provider");
    });
  </script>
<% end -%>
