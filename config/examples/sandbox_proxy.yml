base: &default
  test_api_hosts:
    - echo-api.3scale.net
  ignore_test_failures: []
  # Backend endpoint as visible by apicast (host.containers.internal in podman)
  # but this should resolve from apicast through DNS as it doesn't read hosts.
  # If not possible, then set BACKEND_ENDPOINT_OVERRIDE when starting apicast.
  backend_endpoint: <%= ENV.fetch('BACKEND_PUBLIC_URL', 'http://host.docker.internal:3001') %>
  verify_mode: <%= OpenSSL::SSL::VERIFY_NONE %>
  # APIcast endpoints as visible from the client
  apicast_staging_endpoint: 'http://%{system_name}-%{account_id}.staging.%{env}apicast.dev.localhost:8080'
  apicast_production_endpoint: 'http://%{system_name}-%{account_id}.%{env}apicast.dev.localhost:8000'
  apicast_registry_url: <%= ENV['APICAST_REGISTRY_URL'] %>
  self_managed_apicast_registry_url: <%= ENV['APICAST_REGISTRY_URL'] %>
  sandbox_endpoint: 'https://%{system_name}-%{account_id}.staging.%{env}apicast.io:%{port}'
  hosted_proxy_endpoint: 'https://%{system_name}-%{account_id}.%{env}apicast.io:%{port}'

development:
  <<: *default
  # apicast as seen from the running porta server for testing an API from UI
  # you can use this to override the default if needed for whatever reason
  # override: 'http://localhost:8091'
  debug: true

test:
  <<: *default
  backend_endpoint: 'http://127.0.0.1:4001'

production:
  test_api_hosts:
    - echo-api.3scale.net
  ignore_test_failures: []
  backend_endpoint: <%= ENV.fetch('BACKEND_PUBLIC_URL') { "https://backend-#{ENV['TENANT_NAME']}.#{ENV['THREESCALE_SUPERDOMAIN']}" } %>
  verify_mode: <%= OpenSSL::SSL.const_get(ENV.fetch('THREESCALE_SANDBOX_PROXY_OPENSSL_VERIFY_MODE', 'VERIFY_NONE')) %>
  apicast_staging_endpoint: 'https://%{system_name}-%{tenant_name}-apicast-staging.<%=ENV.fetch('THREESCALE_SUPERDOMAIN', '3scale.net')%>:%{port}'
  apicast_production_endpoint: 'https://%{system_name}-%{tenant_name}-apicast-production.<%=ENV.fetch('THREESCALE_SUPERDOMAIN', '3scale.net')%>:%{port}'
  apicast_registry_url: <%= ENV.fetch('APICAST_REGISTRY_URL', 'http://apicast-staging:8090/policies') %>
  self_managed_apicast_registry_url: <%= ENV.fetch('APICAST_REGISTRY_URL', 'http://apicast-staging:8090/policies') %>
  sandbox_endpoint: 'https://%{system_name}-%{tenant_name}-apicast-staging.<%=ENV.fetch('THREESCALE_SUPERDOMAIN', '3scale.net')%>:%{port}'
  hosted_proxy_endpoint: 'https://%{system_name}-%{tenant_name}-apicast-production.<%=ENV.fetch('THREESCALE_SUPERDOMAIN', '3scale.net')%>:%{port}'
